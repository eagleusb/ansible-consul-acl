#!/usr/bin/python
# -*- coding: utf-8 -*-

# Copyright: (c) 2020, Leslie-Alexandre DENIS <git@eagleusb.com>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

ANSIBLE_METADATA = {'metadata_version': '1.1',
                    'status': ['preview'],
                    'supported_by': 'community'}

DOCUMENTATION = """
---
module: consul_acl
short_description: Manipulate Consul ACL and tokens
description:
 - Allows the addition, modification and deletion of ACL keys and associated
   rules in a consul cluster via the agent. For more details on using and
   configuring ACLs, see https://www.consul.io/docs/guides/acl.html.
version_added: "2.0"
author:
  - Steve Gargan (@sgargan)
  - Colin Nolan (@colin-nolan)
  - Leslie-Alexandre DENIS (@eagleusb)
options:
  mgmt_token:
    description:
      - a management token is required to manipulate the acl lists
  state:
    description:
      - whether the ACL pair should be present or absent
    required: false
    choices: ['present', 'absent']
    default: present
  token_type:
    description:
      - the type of token that should be created
    choices: ['client', 'management']
    default: client
  name:
    description:
      - the name that should be associated with the token and its policy (alpha-numeric only)
    required: true
  token:
    description:
      - the token key identifying an ACL rule set. If generated by Consul this will be a UUID
    required: false
  rules:
    type: list
    description:
      - rules that should be associated with a given token
    required: false
  host:
    description:
      - host of the consul agent defaults to localhost
    required: false
    default: localhost
  port:
    type: int
    description:
      - the port on which the consul agent is running
    required: false
    default: 8500
  scheme:
    description:
      - the protocol scheme on which the consul agent is running
    required: false
    default: http
    version_added: "2.1"
  validate_certs:
    type: bool
    description:
      - whether to verify the tls certificate of the consul agent
    required: false
    default: True
    version_added: "2.1"
requirements:
  - python-consul
  - pyhcl
  - requests
"""

EXAMPLES = """
- name: create an ACL with rules
  consul_acl:
    host: consul1.example.com
    mgmt_token: some_management_acl
    name: "foo-access"
    rules:
      - key: "foo"
        policy: read
      - key: "private/foo"
        policy: deny
- name: create an ACL with a specific token
  consul_acl:
    host: consul1.example.com
    mgmt_token: some_management_acl
    name: "foo-access"
    token: my-token
    rules:
      - key: "foo"
        policy: read
- name: update the rules associated to an ACL token
  consul_acl:
    host: consul1.example.com
    mgmt_token: some_management_acl
    name: "foo-access"
    token: some_client_token
    rules:
      - event: "bbq"
        policy: write
      - key: "foo"
        policy: read
      - key: "private"
        policy: deny
      - keyring: write
      - node: "hgs4"
        policy: write
      - operator: read
      - query: ""
        policy: write
      - service: "consul"
        policy: write
      - session: "standup"
        policy: write
- name: remove a token
  consul_acl:
    host: consul1.example.com
    mgmt_token: some_management_acl
    token: 172bd5c8-9fe9-11e4-b1b0-3c15c2c9fd5e
    state: absent
"""

RETURN = """
token:
    description: the token associated to the ACL (the ACL's ID)
    returned: success
    type: str
    sample: a2ec332f-04cf-6fba-e8b8-acf62444d3da
rules:
    description: the HCL JSON representation of the rules associated to the ACL, in the format described in the
                 Consul documentation (https://www.consul.io/docs/guides/acl.html#rule-specification).
    returned: I(status) == "present"
    type: str
    sample: {
        "key": {
            "foo": {
                "policy": "write"
            },
            "bar": {
                "policy": "deny"
            }
        }
    }
operation:
    description: the operation performed on the ACL
    returned: changed
    type: str
    sample: update
"""

try:
    import consul
    import hcl
    import json
    from requests.exceptions import ConnectionError
    from ansible.module_utils.basic import AnsibleModule
except ImportError:
    raise ImportError("You must install python-consul2, pyhcl and requests")

PARAM_DATACENTER = "datacenter"
PARAM_HOSTNAME = "host"
PARAM_NAME = "name"
PARAM_PORT = "port"
PARAM_RULES = "rules"
PARAM_SCHEME = "scheme"
PARAM_STATE = "state"
PARAM_TOKEN = "token"
PARAM_TOKEN_ADMIN = "mgmt_token"
PARAM_TOKEN_TYPE = "token_type"
PARAM_VALIDATE_CERTS = "validate_certs"

CREATE_OPERATION = "create"
REMOVE_OPERATION = "remove"
UPDATE_OPERATION = "update"

VALID_RULES_SCOPES = [
    "agent",
    "event",
    "key",
    "keyring",
    "node",
    "operator",
    "query",
    "service",
    "session"
]

_ARGUMENT_SPEC = {
    PARAM_DATACENTER: dict(default=["dc1"], type="list"),
    PARAM_HOSTNAME: dict(default='localhost', type="str"),
    PARAM_NAME: dict(required=True, type="str"),
    PARAM_PORT: dict(default=8500, type="int"),
    PARAM_RULES: dict(default=None, required=False, type="dict"),
    PARAM_SCHEME: dict(required=False, default="http"),
    PARAM_STATE: dict(default="present", choices=["present", "absent"], type="list"),
    PARAM_TOKEN_ADMIN: dict(required=True, no_log=True, type="str"),
    PARAM_TOKEN: dict(required=False, type="str"),
    PARAM_TOKEN_TYPE: dict(required=False, choices=["client", "management"],
                           default="client", type="list"),
    PARAM_VALIDATE_CERTS: dict(required=False, default=True, type="bool"),
}


class Consul(object):
    def __init__(self):
        self.result = {
            "changed": False,
            "original_message": "",
            "message": "",
        }
        self.module = AnsibleModule(
            argument_spec=_ARGUMENT_SPEC,
            supports_check_mode=False,
            required_together=[],
        )
        self._consul_client()

    def _consul_client(self):
        token_admin = self.module.params[PARAM_TOKEN_ADMIN]
        if not token_admin:
            raise AssertionError(
                "Expecting the management token to always be set")

        self.consul = consul.Consul(
            host=self.module.params[PARAM_HOSTNAME],
            port=self.module.params[PARAM_PORT],
            scheme=self.module.params[PARAM_SCHEME],
            verify=self.module.params[PARAM_VALIDATE_CERTS],
            token=self.module.params[PARAM_TOKEN_ADMIN],
            dc=None,
        )

    def _policy_exists(self):
        policy_exists = [
            True if policy["Name"] == self.module.params[PARAM_NAME] else False
            for policy in self.consul.acl.policy.list()
        ]
        return True in policy_exists

    def _policy_create(self):
        if self._policy_exists():
            self.result["changed"] = False
            return
        else:
            rules = self._json_from_yaml(self.module.params[PARAM_RULES])
            self.consul.acl.policy.create(
                name=self.module.params[PARAM_NAME],
                description=self.module.params[PARAM_NAME],
                rules=rules,
                datacenters=self.module.params[PARAM_DATACENTER],
            )
            self.result["rules"] = rules
            self.result["changed"] = True


    def _policy_update(self, parameter_list):
        pass

    def _policy_delete(self, parameter_list):
        pass

    def _token_exists(self, parameter_list):
        pass

    def _token_create(self, parameter_list):
        payload = {
            "SecretID": self.module.params[PARAM_TOKEN],
            "Description": self.module.params[PARAM_NAME],
            "Policies": [
                {
                    "Name": self.module.params[PARAM_NAME]
                }
            ]
        }
        self.consul.acl.tokens.create(payload)

    def _token_update(self, parameter_list):
        pass

    def _token_delete(self, parameter_list):
        pass

    def _hcl_from_json(self, rules):
        try:
            rules_from_json = hcl.loads(rules)
            return rules_from_json
        except TypeError as identifier:
              pass

    def _json_from_yaml(self, rules):
        try:
            rules_from_yaml = json.dumps(rules)
            return rules_from_yaml
        except TypeError as identifier:
            pass

    def run(self):
        # policy
        self._policy_create()
        # token
        self.module.exit_json(**self.result)


if __name__ == "__main__":
    Consul().run()
